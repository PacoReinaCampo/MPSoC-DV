digraph behavioral_state_tl {
  node [shape = circle, style=filled, fillcolor=lightblue];
  
  // Estados
  IDLE [label="IDLE"];
  REQUEST [label="REQUEST"];
  ADDRESS_PHASE [label="ADDRESS\nPHASE"];
  DATA_PHASE [label="DATA\nPHASE"];
  RESPONSE [label="RESPONSE"];
  ERROR [label="ERROR"];

  // Transiciones
  IDLE -> REQUEST [label="Request\nFrom CPU"];
  REQUEST -> ADDRESS_PHASE [label="Address\nPhase"];
  ADDRESS_PHASE -> DATA_PHASE [label="Address\nAcknowledge"];
  ADDRESS_PHASE -> ERROR [label="Address\nError"];
  DATA_PHASE -> RESPONSE [label="Data\nAcknowledge"];
  DATA_PHASE -> ERROR [label="Data\nError"];
  RESPONSE -> IDLE [label="Reset"];
  ERROR -> IDLE [label="Reset"];
  
  // Subestados de la fase de direcciÃ³n
  subgraph cluster_address_phase {
    label = " ADDRESS PHASE";
    style = rounded;
    color = lightgrey;
    node [shape=ellipse, style=filled, fillcolor=lightgrey];
    WAIT_ADDRESS [label="WAIT"];
    ADDRESS_REQUEST [label="ADDRESS\nREQUEST"];
    WAIT_ADDRESS -> ADDRESS_REQUEST [label="Start"];
    ADDRESS_REQUEST -> ADDRESS_PHASE [label="Address\nRequest"];
    ADDRESS_PHASE -> WAIT_ADDRESS [label="Reset"];
  }

  // Subestados de la fase de datos
  subgraph cluster_data_phase {
    label = " DATA PHASE";
    style = rounded;
    color = lightgrey;
    node [shape=ellipse, style=filled, fillcolor=lightgrey];
    WAIT_DATA [label="WAIT"];
    DATA_REQUEST [label="DATA\nREQUEST"];
    WAIT_DATA -> DATA_REQUEST [label="Start"];
    DATA_REQUEST -> DATA_PHASE [label="Data\nRequest"];
    DATA_PHASE -> WAIT_DATA [label="Reset"];
  }
}